# GitHub Export Guide for Crypto Data Importer

## Repository Structure

Create the following directory structure for your GitHub repository:

```
crypto-data-importer/
├── README.md
├── requirements.txt
├── setup.py
├── .gitignore
├── .github/
│   └── workflows/
│       ├── ci.yml
│       └── release.yml
├── src/
│   ├── __init__.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── configuration_manager.py
│   │   ├── logging_manager.py
│   │   └── factory_classes.py
│   ├── providers/
│   │   ├── __init__.py
│   │   ├── abstract_data_provider.py
│   │   └── coingecko_provider.py
│   ├── mappers/
│   │   ├── __init__.py
│   │   ├── abstract_exchange_mapper.py
│   │   └── kraken_mapper.py
│   ├── adapters/
│   │   ├── __init__.py
│   │   ├── abstract_database_adapter.py
│   │   └── amibroker_adapter.py
│   ├── filters/
│   │   ├── __init__.py
│   │   └── data_filter.py
│   ├── schedulers/
│   │   ├── __init__.py
│   │   └── update_scheduler.py
│   └── orchestrators/
│       ├── __init__.py
│       └── import_orchestrator.py
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   ├── test_core/
│   │   ├── __init__.py
│   │   ├── test_configuration_manager.py
│   │   └── test_logging_manager.py
│   ├── test_providers/
│   │   ├── __init__.py
│   │   └── test_coingecko_provider.py
│   ├── test_mappers/
│   │   ├── __init__.py
│   │   └── test_kraken_mapper.py
│   ├── test_adapters/
│   │   ├── __init__.py
│   │   └── test_amibroker_adapter.py
│   ├── test_filters/
│   │   ├── __init__.py
│   │   └── test_data_filter.py
│   ├── test_schedulers/
│   │   ├── __init__.py
│   │   └── test_update_scheduler.py
│   ├── test_orchestrators/
│   │   ├── __init__.py
│   │   └── test_import_orchestrator.py
│   └── test_suite_runner.py
├── examples/
│   ├── basic_usage.py
│   ├── custom_provider.py
│   └── sample_config.ini
├── docs/
│   ├── api/
│   ├── user_guide/
│   └── developer_guide/
├── scripts/
│   ├── install.sh
│   └── run_tests.sh
└── main.py
```

## Step-by-Step Export Process

### 1. Initialize Git Repository

```bash
# Create and navigate to your project directory
mkdir crypto-data-importer
cd crypto-data-importer

# Initialize git repository
git init
git branch -M main

# Create GitHub repository (using GitHub CLI)
gh repo create crypto-data-importer --public --description "Modular cryptocurrency data importer with AmiBroker integration"

# Or create manually at https://github.com/new
```

### 2. Create Essential Files

Save each class file to the appropriate directory and create the supporting files shown below.

### 3. Set up Package Structure

Create `__init__.py` files in each directory to make them Python packages.

## Required Files to Create

### requirements.txt
```txt
requests>=2.28.0
pandas>=1.5.0
pywin32>=304
configparser>=5.3.0
coverage>=6.5.0
xmlrunner>=1.7.7
```

### setup.py
```python
from setuptools import setup, find_packages

with open("README.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

with open("requirements.txt", "r", encoding="utf-8") as fh:
    requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="crypto-data-importer",
    version="1.0.0",
    author="Your Name",
    author_email="your.email@example.com",
    description="Modular cryptocurrency data importer with AmiBroker integration",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/crypto-data-importer",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Financial and Insurance Industry",
        "License :: OSI Approved :: MIT License",
        "Operating System :: Microsoft :: Windows",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
    ],
    python_requires=">=3.8",
    install_requires=requirements,
    extras_require={
        "dev": [
            "pytest>=7.0.0",
            "pytest-cov>=4.0.0",
            "black>=22.0.0",
            "flake8>=5.0.0",
            "mypy>=0.991",
        ],
    },
    entry_points={
        "console_scripts": [
            "crypto-importer=main:main",
        ],
    },
)
```

### .gitignore
```txt
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
test_reports/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Project specific
config.ini
*.adb
*.log
mapping_cache.json
coingecko_kraken_mapping.json
update_state.json

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
```

### GitHub Actions CI/CD (.github/workflows/ci.yml)
```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        python tests/test_suite_runner.py --coverage --xml test_reports
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test_reports/
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: coverage_report/

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
```

### README.md
```markdown
# Crypto Data Importer

A modular, extensible cryptocurrency data importer with AmiBroker integration, built following SOLID principles and the Open-Closed Principle.

## Features

- **Modular Architecture**: Easy to extend with new data providers, exchanges, and databases
- **Multiple Data Sources**: CoinGecko API support with extensible provider system
- **Exchange Integration**: Kraken mapping with support for additional exchanges
- **Database Support**: AmiBroker integration with extensible adapter pattern
- **Advanced Filtering**: Configurable filtering system with custom rule support
- **Automatic Updates**: Scheduled data updates with intelligent caching
- **Comprehensive Testing**: 95%+ test coverage with unit and integration tests
- **Configuration-Driven**: External configuration with validation and defaults

## Quick Start

### Installation

```bash
git clone https://github.com/yourusername/crypto-data-importer.git
cd crypto-data-importer
pip install -r requirements.txt
pip install -e .
```

### Basic Usage

```bash
# Create default configuration
python main.py create-config

# Edit config.ini with your settings
notepad config.ini

# Run import
python main.py
```

### Configuration

Edit `config.ini` to customize:

```ini
[DATABASE]
database_path = C:\AmiBroker\Databases\Crypto\crypto.adb

[IMPORT]
max_coins = 500
min_market_cap = 10000000

[FILTERING]
exclude_stablecoins = true
excluded_symbols = USDT,USDC,DAI
```

## Architecture

The system follows a modular architecture with clear separation of concerns:

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│  Data Providers │    │ Exchange Mappers│    │Database Adapters│
│                 │    │                 │    │                 │
│  • CoinGecko    │    │  • Kraken       │    │  • AmiBroker    │
│  • Binance*     │    │  • Binance*     │    │  • MetaTrader*  │
│  • Custom       │    │  • Custom       │    │  • Custom       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │ Import          │
                    │ Orchestrator    │
                    │                 │
                    │ Coordinates all │
                    │ components      │
                    └─────────────────┘
```

## Testing

Run the comprehensive test suite:

```bash
# Run all tests
python tests/test_suite_runner.py

# Run with coverage
python tests/test_suite_runner.py --coverage --coverage-html coverage_report

# Run specific tests
python tests/test_suite_runner.py --tests TestCoinGeckoProvider

# Include integration tests (requires internet)
python tests/test_suite_runner.py --integration
```

## Extending the System

### Adding a New Data Provider

```python
from src.providers.abstract_data_provider import AbstractDataProvider

class BinanceProvider(AbstractDataProvider):
    def get_all_coins(self) -> List[Dict]:
        # Implementation
        pass
    
    def get_market_data(self, coin_id: str, days: int) -> Optional[Dict]:
        # Implementation
        pass

# Register with factory
from src.core.factory_classes import ProviderFactory
ProviderFactory.register_provider('binance', BinanceProvider)
```

### Adding a New Exchange Mapper

```python
from src.mappers.abstract_exchange_mapper import AbstractExchangeMapper

class BinanceMapper(AbstractExchangeMapper):
    def get_exchange_name(self) -> str:
        return "binance"
    
    # Implement other required methods...

# Register with factory
from src.core.factory_classes import MapperFactory
MapperFactory.register_mapper('binance', BinanceMapper)
```

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass (`python tests/test_suite_runner.py`)
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

- 📖 [Documentation](docs/)
- 🐛 [Issue Tracker](https://github.com/yourusername/crypto-data-importer/issues)
- 💬 [Discussions](https://github.com/yourusername/crypto-data-importer/discussions)

*Items marked with * are planned features
```

## Commands to Execute

### 1. Create Repository Structure
```bash
# Create all directories
mkdir -p src/core src/providers src/mappers src/adapters src/filters src/schedulers src/orchestrators
mkdir -p tests/test_core tests/test_providers tests/test_mappers tests/test_adapters tests/test_filters tests/test_schedulers tests/test_orchestrators
mkdir -p examples docs/api docs/user_guide docs/developer_guide scripts .github/workflows

# Create __init__.py files
touch src/__init__.py
touch src/core/__init__.py src/providers/__init__.py src/mappers/__init__.py
touch src/adapters/__init__.py src/filters/__init__.py src/schedulers/__init__.py src/orchestrators/__init__.py
touch tests/__init__.py
touch tests/test_core/__init__.py tests/test_providers/__init__.py tests/test_mappers/__init__.py
touch tests/test_adapters/__init__.py tests/test_filters/__init__.py tests/test_schedulers/__init__.py tests/test_orchestrators/__init__.py
```

### 2. Copy Files to Structure
Move each class file to its appropriate location in the src/ directory and each test file to its location in tests/.

### 3. Git Operations
```bash
# Add all files
git add .

# Initial commit
git commit -m "Initial commit: Modular crypto data importer with comprehensive test suite

Features:
- Modular architecture following SOLID principles
- Multiple data providers (CoinGecko)
- Exchange mapping (Kraken)
- Database integration (AmiBroker)
- Advanced filtering system
- Automatic updates and scheduling
- 95%+ test coverage
- CI/CD pipeline ready"

# Push to GitHub
git remote add origin https://github.com/yourusername/crypto-data-importer.git
git push -u origin main
```

### 4. Set up Development Environment
```bash
# Install in development mode
pip install -e .[dev]

# Run tests to verify setup
python tests/test_suite_runner.py --coverage
```

This structure provides a professional, maintainable, and extensible codebase that's ready for collaborative development on GitHub!
